/**
 * @fileoverview Initialization and convenience functions for the EE library.
 */

goog.provide('ee');
goog.provide('ee.InitState');

goog.require('ee.ApiFunction');
goog.require('ee.Collection');
goog.require('ee.ComputedObject');
goog.require('ee.Feature');
goog.require('ee.FeatureCollection');
goog.require('ee.Filter');
goog.require('ee.Function');
goog.require('ee.Geometry');
goog.require('ee.Image');
goog.require('ee.ImageCollection');
goog.require('ee.data');


/**
 * Initialize the library.  If this hasn't been called by the time any
 * object constructor is used, it will be called then.  If this is called
 * a second time with a different baseurl or tileurl, this doesn't do an
 * un-initialization of e.g.: the previously loaded Algorithms, but will
 * overwrite them and let point at alternate servers.
 *
 * @param {string?=} opt_baseurl The (proxied) EarthEngine REST API endpoint.
 * @param {string?=} opt_tileurl The (unproxied) EarthEngine REST tile endpoint.
 * @param {function()=} opt_callback An optional callback to be invoked when
 *     the initialization is done.  If not provided the initialization is
 *     done synchronously.
 */
ee.initialize = function(opt_baseurl, opt_tileurl, opt_callback) {
  // If we're already initialized and not getting new parameters, just return.
  if (ee.ready_ == ee.InitState.READY && !opt_baseurl && !opt_tileurl) {
    return;
  } else if (ee.ready() == ee.InitState.LOADING) {
    throw new Error('Already loading.');
  }

  ee.ready_ = ee.InitState.LOADING;
  ee.data.initialize(opt_baseurl, opt_tileurl);

  // Initialize the dynamically loaded functions on the objects that want them.
  var finish = function() {
    ee.Image.initialize();
    ee.Feature.initialize();
    ee.Collection.initialize();
    ee.ImageCollection.initialize();
    ee.FeatureCollection.initialize();
    ee.Filter.initialize();

    ee.ready_ = ee.InitState.READY;
    if (opt_callback) {
      opt_callback();
    }
  };

  if (opt_callback) {
    ee.ApiFunction.initialize(finish);
  } else {
    try {
      ee.ApiFunction.initialize();
      finish();
    } catch (e) {
      alert('Could not read algorithm list.');
    }
  }
};


/**
 * Reset the library to its base state. Useful for re-initializing to a
 * different server.
 */
ee.reset = function() {
  ee.ready_ = ee.InitState.NOT_READY;
  ee.data.reset();
  ee.ApiFunction.reset();
  ee.Image.reset();
  ee.Feature.reset();
  ee.Collection.reset();
  ee.ImageCollection.reset();
  ee.FeatureCollection.reset();
  ee.Filter.reset();
};


/**
 * The possible states for the library initialization function.  We want
 * to prohibit multiple overlapping calls, and allow the user a way to poll
 * to see what the state is.
 *
 * @enum {string}
 */
ee.InitState = {
  NOT_READY: 'not_ready',
  LOADING: 'loading',
  READY: 'ready'
};


/**
 * A flag to indicate the initialization state.
 * @private
 */
ee.ready_ = ee.InitState.NOT_READY;


/**
 * @type {number} The size of a tile generated by the /map servlet.
 * @const
 */
ee.TILE_SIZE = 256;


/**
 * @return {ee.InitState} The initialization status.
 */
ee.ready = function() {
  return ee.ready_;
};


/**
 * Call a function with the given positional arguments.
 *
 * @param {ee.Function|string} func The function to call. Either an
 *     ee.Function object or the name of an API function.
 * @param {...*} var_args Positional arguments to pass to the function.
 * @return {ee.ComputedObject} An object representing the called function.
 *     If the signature specifies a recognized return type, the returned
 *     value will be cast to that type.
 */
ee.call = function(func, var_args) {
  if (goog.isString(func)) {
    func = new ee.ApiFunction(func);
  }
  // Extract var_args.
  var args = Array.prototype.slice.call(arguments, 1);
  // Call func.call with the extracted agrs.
  return ee.Function.prototype.call.apply(func, args);
};


/**
 * Call a function with a dictionary of named arguments.
 *
 * @param {ee.Function|string} func The function to call. Either an
 *     ee.Function object or the name of an API function.
 * @param {Object} namedArgs A dictionary of arguments to the function.
 * @return {ee.ComputedObject} An object representing the called function.
 *     If the signature specifies a recognized return type, the returned
 *     value will be cast to that type.
 */
ee.apply = function(func, namedArgs) {
  if (goog.isString(func)) {
    func = new ee.ApiFunction(func);
  }
  return func.apply(namedArgs);
};


/**
 * Wrap an argument in an object of the specified class. This is used to
 * e.g.: promote numbers or strings to Images and arrays to Collections.
 *
 * @param {?} arg The object to promote.
 * @param {string} klass The expected type.
 * @return {?} The argument promoted if the class is recognized, otherwise the
 *     original argument.
 * @private
 */
ee.promote_ = function(arg, klass) {
  if (goog.isNull(arg)) {
    return null;
  } else if (!goog.isDef(arg)) {
    return undefined;
  }

  switch (klass) {
    case 'Image':
      return new ee.Image(/** @type {Object} */ (arg));
    case 'ImageCollection':
      return new ee.ImageCollection(/** @type {?} */ (arg));
    case 'Feature':
    case 'EEObject':
      if (arg instanceof ee.Collection) {
        // TODO(user): Decide whether we want to leave this in. It can be
        //              quite dangerous on large collections.
        return ee.ApiFunction._call(
            'Feature', ee.ApiFunction._call('ExtractGeometry', arg));
      } else {
        return new ee.Feature(/** @type {Object} */ (arg));
      }
    case 'ProjGeometry':
    case 'Geometry':
      if (arg instanceof ee.FeatureCollection) {
        return ee.ApiFunction._call('ExtractGeometry', arg);
      } else if (arg instanceof ee.ComputedObject) {
        return arg;
      } else {
        return new ee.Geometry(/** @type {?} */ (arg));
      }
    case 'FeatureCollection':
    case 'EECollection':
    case 'Collection':
      if (arg instanceof ee.Collection) {
        return arg;
      } else {
        return new ee.FeatureCollection(/** @type {?} */ (arg));
      }
    case 'Filter':
      return new ee.Filter(/** @type {Object} */ (arg));
    case 'ErrorMargin':
      if (goog.isNumber(arg)) {
        return ee.ApiFunction._call('ErrorMargin', arg, 'meters');
      } else {
        return arg;
      }
    case 'Algorithm':
      if (goog.isString(arg)) {
        return new ee.ApiFunction(arg);
      } else {
        return arg;
      }
    case 'Date':
      if (goog.isString(arg)) {
        return new Date(arg);
      } else if (goog.isNumber(arg)) {
        return new Date(arg);
      } else {
        return arg;
      }
    default:
      return arg;
  }
};

// Set up type promotion rules as soon the library is loaded.
ee.Function.registerPromoter(ee.promote_);

goog.exportSymbol('ee.initialize', ee.initialize);
goog.exportSymbol('ee.reset', ee.reset);
goog.exportSymbol('ee.InitState', ee.InitState);
goog.exportSymbol('ee.InitState.NOT_READY', ee.InitState.NOT_READY);
goog.exportSymbol('ee.InitState.LOADING', ee.InitState.LOADING);
goog.exportSymbol('ee.InitState.READY', ee.InitState.READY);
goog.exportSymbol('ee.ready', ee.ready);
goog.exportSymbol('ee.call', ee.call);
goog.exportSymbol('ee.apply', ee.apply);
goog.exportSymbol('ee.TILE_SIZE', ee.TILE_SIZE);
